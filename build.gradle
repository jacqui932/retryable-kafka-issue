plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "application"
    id 'com.adarshr.test-logger' version '2.1.0'
}

version "0.1"
group "my.project"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    annotationProcessor('io.micronaut:micronaut-inject-java:2.0.0')

    compileOnly(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    compileOnly("io.micronaut:micronaut-inject-groovy")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation 'org.projectlombok:lombok:1.18.12'
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    developmentOnly("io.micronaut:micronaut-runtime-osx:$micronautVersion")
    implementation("ch.qos.logback:logback-classic")
    implementation 'net.logstash.logback:logstash-logback-encoder:6.1'
    implementation 'joda-time:joda-time:2.10.6'
    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation("io.micronaut.test:micronaut-test-spock")

    testImplementation 'org.apache.kafka:kafka-clients:2.5.0:test'
    testImplementation 'org.apache.kafka:kafka_2.12:2.5.0'
    testImplementation 'org.apache.kafka:kafka_2.12:2.5.0:test'
}

test.classpath += configurations.developmentOnly

mainClassName = "my.project.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
    targetCompatibility = JavaVersion.toVersion('1.8')
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}

task cleanFolders {
    delete(file('LOG_LOCATION_IS_UNDEFINED'))
}

clean.dependsOn cleanFolders
